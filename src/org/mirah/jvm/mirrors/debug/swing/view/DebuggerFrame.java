/*
 * Copyright (c) 2014 The Mirah project authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
package org.mirah.jvm.mirrors.debug.swing.view;

import java.awt.event.MouseEvent;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.tree.TreePath;
import mirah.lang.ast.Node;
import mirah.lang.ast.Position;
import org.mirah.jvm.mirrors.debug.Breakpoint;
import org.mirah.jvm.mirrors.debug.DebugController;
import org.mirah.jvm.mirrors.debug.swing.model.NodeModel;
import org.mirah.jvm.mirrors.debug.swing.model.NodeRenderData;
import org.mirah.jvm.mirrors.debug.swing.model.VariableModel;
import org.mirah.jvm.mirrors.debug.swing.model.VariableRenderData;
import org.mirah.typer.BaseTypeFuture;
import org.mirah.typer.TypeFuture;
import org.netbeans.swing.outline.Outline;

public class DebuggerFrame extends javax.swing.JFrame {
    private DebugController debugger;
    
    public DebuggerFrame(DebugController debugger) {
        this.debugger = debugger;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        nodeConverter1 = new org.mirah.jvm.mirrors.debug.swing.model.NodeConverter();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        breakBeforeItem = new javax.swing.JMenuItem();
        watchItem = new javax.swing.JMenuItem();
        watchAllItem = new javax.swing.JMenuItem();
        clearWatchItem = new javax.swing.JMenuItem();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        newBreakpointItem = new javax.swing.JMenuItem();
        clearBreakpointItem = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        mainPane = new javax.swing.JSplitPane();
        sourcePane = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        astOutline = new org.netbeans.swing.outline.Outline();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        codeTextPane = new javax.swing.JTextPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        varsOutline = new org.netbeans.swing.outline.Outline();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        outputTextPane = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        debugMenu = new javax.swing.JMenu();
        continueMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        debuggerModel1.stopped(debugger.where());
        debuggerModel1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                debuggerModel1PropertyChange(evt);
            }
        });

        breakBeforeItem.setText("Breakpoint");
        breakBeforeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breakBeforeItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(breakBeforeItem);

        watchItem.setText("Watch");
        watchItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watchItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(watchItem);

        watchAllItem.setText("Watch all");
        watchAllItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watchAllItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(watchAllItem);

        clearWatchItem.setText("Clear watch");
        clearWatchItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearWatchItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(clearWatchItem);

        newBreakpointItem.setText("New Breakpoint");
        newBreakpointItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBreakpointItemActionPerformed(evt);
            }
        });
        jPopupMenu2.add(newBreakpointItem);

        clearBreakpointItem.setText("Clear Breakpoint");
        clearBreakpointItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBreakpointItemActionPerformed(evt);
            }
        });
        jPopupMenu2.add(clearBreakpointItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPane.setDividerLocation(600);
        mainPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mainPane.setResizeWeight(1.0);
        mainPane.setToolTipText("");

        sourcePane.setPreferredSize(new java.awt.Dimension(600, 800));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${selectedNode}"), astOutline, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        binding.setConverter(nodeConverter1);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${ast}"), astOutline, org.jdesktop.beansbinding.BeanProperty.create("model"));
        bindingGroup.addBinding(binding);

        astOutline.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                astOutlineMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                astOutlineMouseReleased(evt);
            }
        });
        astOutline.setRenderDataProvider(new NodeRenderData());
        astOutline.setRootVisible(true);
        jScrollPane3.setViewportView(astOutline);

        sourcePane.addTab("AST", jScrollPane3);

        jTextPane1.setContentType("text/html"); // NOI18N
        jTextPane1.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${selectedScript.generatedCode}"), jTextPane1, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        bindingGroup.addBinding(binding);

        jScrollPane7.setViewportView(jTextPane1);

        sourcePane.addTab("Code", jScrollPane7);

        codeTextPane.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${selectedNode.sourceCode}"), codeTextPane, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${selectedNode.endChar}"), codeTextPane, org.jdesktop.beansbinding.BeanProperty.create("selectionEnd"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${selectedNode.startChar}"), codeTextPane, org.jdesktop.beansbinding.BeanProperty.create("selectionStart"));
        bindingGroup.addBinding(binding);

        jScrollPane4.setViewportView(codeTextPane);

        sourcePane.addTab("Original", jScrollPane4);

        mainPane.setLeftComponent(sourcePane);

        varsOutline.setModel(debuggerModel1.getVars());
        varsOutline.setRenderDataProvider(new VariableRenderData());
        varsOutline.setRootVisible(false);
        varsOutline.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                varsOutlineMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                varsOutlineMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(varsOutline);

        jTabbedPane2.addTab("Variables", jScrollPane5);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${breakpoints}"), jList2, org.jdesktop.beansbinding.BeanProperty.create("model"));
        bindingGroup.addBinding(binding);

        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jList2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jList2MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jList2);

        jTabbedPane2.addTab("Breakpoints", jScrollPane1);

        jScrollPane6.setViewportView(outputTextPane);

        jTabbedPane2.addTab("Output", jScrollPane6);

        mainPane.setRightComponent(jTabbedPane2);
        jTabbedPane2.getAccessibleContext().setAccessibleName("Variables");

        jSplitPane1.setRightComponent(mainPane);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(100, 100));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(100, 200));

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jList1.setMinimumSize(new java.awt.Dimension(100, 200));
        jList1.setPreferredSize(new java.awt.Dimension(100, 200));

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${stack}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, debuggerModel1, eLProperty, jList1);
        bindingGroup.addBinding(jListBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${currentFrame}"), jList1, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane2.setViewportView(jList1);

        jSplitPane1.setLeftComponent(jScrollPane2);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setPreferredSize(new java.awt.Dimension(100, 40));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mirah/jvm/mirrors/debug/swing/view/Continue24.gif"))); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setPreferredSize(new java.awt.Dimension(36, 36));
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${stopped}"), jButton1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mirah/jvm/mirrors/debug/swing/view/Pause24.gif"))); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setPreferredSize(new java.awt.Dimension(36, 36));
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${running}"), jButton3, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);
        jToolBar1.add(filler1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mirah/jvm/mirrors/debug/swing/view/StepInto24.gif"))); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setPreferredSize(new java.awt.Dimension(36, 36));
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${stopped}"), jButton2, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mirah/jvm/mirrors/debug/swing/view/StepOver24.gif"))); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setPreferredSize(new java.awt.Dimension(36, 36));
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${stopped}"), jButton4, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mirah/jvm/mirrors/debug/swing/view/StepOut24.gif"))); // NOI18N
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setPreferredSize(new java.awt.Dimension(36, 36));
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, debuggerModel1, org.jdesktop.beansbinding.ELProperty.create("${stopped}"), jButton5, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        debugMenu.setText("Debug");

        continueMenuItem.setText("Continue");
        continueMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueMenuItemActionPerformed(evt);
            }
        });
        debugMenu.add(continueMenuItem);

        menuBar.add(debugMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void continueMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueMenuItemActionPerformed
        debugger.continueExecution();
        debuggerModel1.setRunning(true);
    }//GEN-LAST:event_continueMenuItemActionPerformed

    private void debuggerModel1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_debuggerModel1PropertyChange
        if (evt.getPropertyName().equals("selectedNodePath") && evt.getNewValue() != null) {
            astOutline.expandPath((TreePath) evt.getNewValue());
        }
    }//GEN-LAST:event_debuggerModel1PropertyChange

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        debugger.continueExecution();
        debuggerModel1.setRunning(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        debugger.step();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        debugger.step();
        debuggerModel1.setRunning(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        debugger.next();
        debuggerModel1.setRunning(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        debugger.finishNode();
        debuggerModel1.setRunning(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void breakBeforeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakBeforeItemActionPerformed
        final Position p = contextNode.position();
        if (p != null) {
            addBreakpoint(new Breakpoint(p.source().name(), p.startLine()) {
                @Override
                public boolean matches(Position position) {
                    return p.equals(position);
                }
            });
        }
    }//GEN-LAST:event_breakBeforeItemActionPerformed

    private void watchItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watchItemActionPerformed
        debugger.watch(contextFuture, "notsame");
        debuggerModel1.refreshVars();
    }//GEN-LAST:event_watchItemActionPerformed

    private void watchAllItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watchAllItemActionPerformed
        debugger.watch(contextFuture, "all");
        debuggerModel1.refreshVars();
    }//GEN-LAST:event_watchAllItemActionPerformed

    private void varsOutlineMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_varsOutlineMouseReleased
        showPopup(evt);
    }//GEN-LAST:event_varsOutlineMouseReleased

    private void varsOutlineMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_varsOutlineMousePressed
        showPopup(evt);
    }//GEN-LAST:event_varsOutlineMousePressed

    private void clearWatchItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearWatchItemActionPerformed
        debugger.clearWatch(contextWatch);
        debuggerModel1.refreshVars();
    }//GEN-LAST:event_clearWatchItemActionPerformed

    private void astOutlineMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_astOutlineMousePressed
        showPopup(evt);
    }//GEN-LAST:event_astOutlineMousePressed

    private void astOutlineMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_astOutlineMouseReleased
        showPopup(evt);
    }//GEN-LAST:event_astOutlineMouseReleased

    private void clearBreakpointItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBreakpointItemActionPerformed
        removeBreakpoint(jList2.getSelectedIndex());
    }//GEN-LAST:event_clearBreakpointItemActionPerformed

    private void jList2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MousePressed
        showBreakpointPopup(evt);
    }//GEN-LAST:event_jList2MousePressed

    private void jList2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseReleased
        showBreakpointPopup(evt);
    }//GEN-LAST:event_jList2MouseReleased

    private void newBreakpointItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBreakpointItemActionPerformed
        String desc = JOptionPane.showInputDialog(this, "Add breakpoint", "foo.mirah:27");
        if (desc != null) {
            Matcher m = Pattern.compile("^(.+):(\\d+)$").matcher(desc);
            if (m.matches()) {
                addBreakpoint(new Breakpoint(m.group(1), Integer.parseInt(m.group(2))));
            }
        }
    }//GEN-LAST:event_newBreakpointItemActionPerformed

    private void addBreakpoint(Breakpoint b) {
        debuggerModel1.getBreakpoints().addElement(b);
        debugger.addBreakpoint(b);
    }
    
    private void removeBreakpoint(int index) {
        Breakpoint b = debuggerModel1.getBreakpoints().getElementAt(index);
        debuggerModel1.getBreakpoints().removeElement(b);
        debugger.clearBreakpoint(b);
    }
    
    private void showBreakpointPopup(MouseEvent evt) {
        if (evt.isPopupTrigger()) {
            JList source = (JList)evt.getSource();
            int index = source.locationToIndex(evt.getPoint());
            if (index == -1) {
                clearBreakpointItem.setEnabled(false);
            } else {
                clearBreakpointItem.setEnabled(true);
                source.setSelectedIndex(index);
            }
            jPopupMenu2.show(source, evt.getX(), evt.getY());
        }
    }
    
    private Node contextNode;
    private BaseTypeFuture contextFuture;
    private BaseTypeFuture contextWatch;

    private void showPopup(MouseEvent evt) {
        if (evt.isPopupTrigger()) {
            Outline source = (Outline)evt.getSource();
            int row = source.rowAtPoint(evt.getPoint());
            if (row == -1) {
                return;
            }
            source.changeSelection(row, 0, false, false);
            Object model = source.getModel().getValueAt(source.convertRowIndexToModel(row), 0);
            if (model instanceof NodeModel) {
                contextNode = ((NodeModel)model).getNode();
                contextFuture = null;
                contextWatch = null;
            } else if (model instanceof VariableModel) {
                VariableModel var = (VariableModel)model;
                Object value = var.getValue();
                if (value instanceof Node) {
                    contextNode = (Node)value;
                    contextFuture = null;
                    contextWatch = null;
                } else if (value instanceof BaseTypeFuture) {
                    contextNode = null;
                    if (var.getName().startsWith("watch ")) {
                        contextFuture = null;
                        contextWatch = (BaseTypeFuture)value;
                    } else {
                        contextFuture = (BaseTypeFuture)value;
                        contextWatch = null;
                    }
                } else {
                    contextNode = null;
                    contextFuture = null;
                    contextWatch = null;
                }
            }
            breakBeforeItem.setEnabled(contextNode != null);
            watchItem.setEnabled(contextFuture != null);
            watchAllItem.setEnabled(contextFuture != null);
            clearWatchItem.setEnabled(contextWatch != null);
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DebuggerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DebuggerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DebuggerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DebuggerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private org.netbeans.swing.outline.Outline astOutline;
    private javax.swing.JMenuItem breakBeforeItem;
    private javax.swing.JMenuItem clearBreakpointItem;
    private javax.swing.JMenuItem clearWatchItem;
    private javax.swing.JTextPane codeTextPane;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem continueMenuItem;
    private javax.swing.JMenu debugMenu;
    public final org.mirah.jvm.mirrors.debug.swing.model.DebuggerModel debuggerModel1 = new org.mirah.jvm.mirrors.debug.swing.model.DebuggerModel();
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JSplitPane mainPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newBreakpointItem;
    private org.mirah.jvm.mirrors.debug.swing.model.NodeConverter nodeConverter1;
    private javax.swing.JTextPane outputTextPane;
    private javax.swing.JTabbedPane sourcePane;
    private org.netbeans.swing.outline.Outline varsOutline;
    private javax.swing.JMenuItem watchAllItem;
    private javax.swing.JMenuItem watchItem;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
